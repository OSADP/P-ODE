<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema targetNamespace="http://www.ritis.org/schema/filter"
	xmlns:rf="http://www.ritis.org/schema/filter" elementFormDefault="qualified"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
	jaxb:version="2.1" xmlns:ai="http://jaxb.dev.java.net/plugin/if_insertion" version="1.3">

	<xs:annotation>
		<xs:appinfo>
			<jaxb:schemaBindings>
				<jaxb:package name="org.ritis.schema.filter"/>
			</jaxb:schemaBindings>
			<jaxb:globalBindings>
				<jaxb:serializable uid="8504172326220832940"/>
			</jaxb:globalBindings>
		</xs:appinfo>
	</xs:annotation>


	<xs:complexType name="requestHeaders">
		<xs:all>
			<xs:element name="api-key" type="xs:normalizedString"/>
		</xs:all>
	</xs:complexType>

	<xs:element name="event-filter">
		<xs:complexType>
			<xs:all>
				<xs:element minOccurs="0" name="request-headers" type="rf:requestHeaders"/>
				<xs:element name="type" type="rf:ieType" minOccurs="0" default="incident_event"/>
				<xs:element name="active-only" type="xs:boolean" minOccurs="0" default="true"/>
				<xs:element name="systems" type="rf:systems" minOccurs="0"/>
				<xs:element name="location-filters" type="rf:locFilter" minOccurs="0"/>
				<xs:element name="id-filters" type="rf:idFilter" minOccurs="0"/>
				<xs:element name="associated-dms" type="xs:string" minOccurs="0"/>
				<xs:element name="time-filters" type="rf:time-filters" minOccurs="0"/>
				<xs:element name="lane-filters" type="rf:lane-filters" minOccurs="0"/>
				<xs:element name="type-filters" type="rf:type-filters" minOccurs="0"/>
				<xs:element name="output-parameters" type="rf:outputParameters" maxOccurs="1"
					minOccurs="0"/>
				<xs:element name="planned-events" type="rf:associated" minOccurs="0" maxOccurs="1"
					default="include"/>
				<xs:element name="order-by" type="rf:order-by" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>

	<xs:element name="dms-filter">
		<xs:complexType>
			<xs:all>
				<xs:element minOccurs="0" name="request-headers" type="rf:requestHeaders"/>
				<xs:element name="type" type="rf:dmsType" minOccurs="0" default="status"/>
				<xs:element name="systems" type="rf:systems" minOccurs="0"/>
				<xs:element name="location-filters" type="rf:locFilter" minOccurs="0"/>
				<xs:element name="id-filters" type="rf:idFilter" minOccurs="0"/>
				<xs:element name="associated-event" type="xs:string" minOccurs="0"/>
				<xs:element name="associated-include" type="rf:associated" minOccurs="0"
					default="include"/>
				<xs:element name="order-by" type="rf:order-by" minOccurs="0"/>
				<xs:element name="output-parameters" type="rf:outputParameters" maxOccurs="1"
					minOccurs="0"/>
				<xs:element ref="rf:statusAbstract" minOccurs="0" maxOccurs="1"/>
			</xs:all>
		</xs:complexType>
	</xs:element>

	<xs:element name="detector-filter">
		<xs:complexType>
			<xs:all>
				<xs:element minOccurs="0" name="request-headers" type="rf:requestHeaders"/>
				<xs:element name="type" type="rf:detectorType" minOccurs="0" default="zone"/>
				<xs:element name="active-only" type="xs:boolean" minOccurs="0" default="true"/>
				<xs:element name="systems" type="rf:systems" minOccurs="0"/>
				<!-- Detectors accept a single system for backwards compatibility with previous version -->
				<xs:element name="system" type="rf:string-type" minOccurs="0"/>
				<xs:element name="location-filters" type="rf:locFilter" minOccurs="0"/>
				<xs:element name="id-filters" type="rf:idFilter" minOccurs="0"/>
				<xs:element name="order-by" type="rf:order-by" minOccurs="0"/>
				<xs:element name="output-parameters" type="rf:outputParameters" maxOccurs="1"
					minOccurs="0"/>
				<xs:element name="zone-filters" type="rf:zone-filters" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>

	<xs:element name="statusAbstract" abstract="true"/>

	<xs:element name="active-only" type="xs:boolean" substitutionGroup="rf:statusAbstract"/>

	<xs:simpleType name="ieType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="incident"/>
			<xs:enumeration value="event"/>
			<xs:enumeration value="incident_event"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="dmsType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="status"/>
			<xs:enumeration value="inventory"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="detectorType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="zone"/>
			<xs:enumeration value="inventory"/>
			<xs:enumeration value="data"/>
			<xs:enumeration value="status"/>
		</xs:restriction>
	</xs:simpleType>


	<xs:complexType name="systems">
		<xs:sequence>
			<xs:element name="system" type="rf:string-type" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="locFilter">
		<xs:sequence>
			<xs:element ref="rf:location" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="location" abstract="true"/>

	<xs:element name="radius-filter" substitutionGroup="rf:location">
		<xs:complexType>
			<xs:all>
				<xs:element name="latitude" type="rf:lat"/>
				<xs:element name="longitude" type="rf:lon"/>
				<xs:element name="radius" type="rf:positiveDecimal"/>
				<!--
					Whether the geospatial filter is inclusive (within area) or
					exclusive (outside of area)
				-->
				<xs:element name="within" type="xs:boolean" default="true" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>

	<xs:element name="box-filter" substitutionGroup="rf:location">
		<xs:complexType>
			<xs:all>
				<xs:element name="latitude" type="rf:lat"/>
				<xs:element name="longitude" type="rf:lon"/>
				<xs:element name="width" type="rf:positiveDecimal" minOccurs="0"/>
				<xs:element name="height" type="rf:positiveDecimal" minOccurs="0"/>
				<xs:element name="within" type="xs:boolean" default="true" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>

	<xs:element name="arbitrary-geo-filter" substitutionGroup="rf:location">
		<xs:complexType>
			<xs:all>
				<xs:element name="value" type="xs:string"/>
				<xs:element name="srid" type="rf:positiveInteger" default="4326" minOccurs="0"/>
				<xs:element name="within" type="xs:boolean" default="true" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>

	<xs:element name="elevation" substitutionGroup="rf:location">
		<xs:complexType>
			<xs:all>
				<xs:element name="min" type="rf:positiveDecimal"/>
				<xs:element name="max" type="rf:positiveDecimal"/>
				<xs:element name="within" type="xs:boolean" default="true" minOccurs="0"
					maxOccurs="1"/>
			</xs:all>
		</xs:complexType>
	</xs:element>

	<xs:element name="unmapped" substitutionGroup="rf:location" default="include">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:enumeration value="include"/>
				<xs:enumeration value="exclude"/>
				<xs:enumeration value="only"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>

	<xs:element name="roads" type="rf:road-type" substitutionGroup="rf:location"/>

	<xs:complexType name="road-type">
		<xs:sequence>
			<xs:element name="road" type="rf:string-type" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="country" type="rf:string-type" substitutionGroup="rf:location"/>
	<xs:element name="state" type="rf:string-type" substitutionGroup="rf:location"/>
	<xs:element name="county" type="rf:string-type" substitutionGroup="rf:location"/>
	<xs:element name="city" type="rf:string-type" substitutionGroup="rf:location"/>
	
	<xs:complexType name="string-type">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="is" type="rf:isType" default="equal"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<xs:complexType name="idFilter">
		<xs:sequence>
			<xs:element ref="rf:idAbstract" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="idAbstract" abstract="true"/>

	<xs:element name="id" substitutionGroup="rf:idAbstract" type="rf:string"/>

	<xs:simpleType name="numberType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="percent"/>
			<xs:enumeration value="num"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="associated-id" substitutionGroup="rf:idAbstract" type="rf:string"/>

	<xs:complexType name="time-filters">
		<xs:sequence>
			<xs:element ref="rf:timeAbstract" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="timeAbstract" abstract="true"/>

	<xs:element name="future-events" substitutionGroup="rf:timeAbstract">
		<xs:simpleType>
			<xs:union>
				<xs:simpleType>
					<xs:restriction base="rf:string">
						<xs:enumeration value="all"/>
						<xs:enumeration value="none"/>
					</xs:restriction>
				</xs:simpleType>
				<xs:simpleType>
					<xs:restriction base="rf:time-dateTime"/>
				</xs:simpleType>
			</xs:union>

		</xs:simpleType>
	</xs:element>
	<xs:element name="since" type="rf:time-dateTime" substitutionGroup="rf:timeAbstract"/>


	<xs:element name="updated-within" type="rf:positiveInteger" substitutionGroup="rf:timeAbstract"/>
	<xs:element name="start-time" type="rf:time" substitutionGroup="rf:timeAbstract"/>
	<xs:element name="end-time" type="rf:time" substitutionGroup="rf:timeAbstract"/>
	<xs:element name="updated-time" type="rf:time" substitutionGroup="rf:timeAbstract"/>
	<xs:element name="active-during" type="rf:time" substitutionGroup="rf:timeAbstract"/>
	<xs:element name="created-time" type="rf:time" substitutionGroup="rf:timeAbstract"/>
	<xs:element name="confirmed-time" type="rf:time" substitutionGroup="rf:timeAbstract"/>
	<xs:element name="cleared-time" type="rf:time" substitutionGroup="rf:timeAbstract"/>
	<xs:complexType name="time">
		<xs:all>
			<xs:element name="start" type="rf:time-dateTime" minOccurs="1" maxOccurs="1"/>
			<xs:element name="end" type="rf:time-dateTime" minOccurs="0" maxOccurs="1"/>
		</xs:all>
	</xs:complexType>

	<xs:complexType name="lane-filters">
		<xs:sequence>
			<xs:element ref="rf:laneAbstract" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="laneAbstract" abstract="true"/>

	<xs:element name="closed-lanes" type="rf:lane-range" substitutionGroup="rf:laneAbstract"/>

	<xs:complexType name="lane-range">
		<xs:simpleContent>
			<xs:extension base="rf:positiveIntegerOrRange">
				<xs:attribute name="type" type="rf:numberType" default="num"/>
				<xs:attribute name="by" type="rf:byType" default="equal"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<xs:element name="max-closed-lanes" type="rf:lane-range" substitutionGroup="rf:laneAbstract"/>


	<xs:complexType name="response-filters">
		<xs:sequence>
			<xs:element ref="rf:responseLimitAbstract" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="responseLimitAbstract" abstract="true"/>

	<xs:element name="response-limit" type="rf:limit-range"
		substitutionGroup="rf:responseLimitAbstract"/>

	<xs:complexType name="limit-range">
		<xs:simpleContent>
			<xs:extension base="rf:positiveIntegerOrRange"/>
		</xs:simpleContent>
	</xs:complexType>

	<xs:complexType name="type-filters">
		<xs:sequence>
			<xs:element ref="rf:typeAbstract" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="typeAbstract" abstract="true"/>

	<xs:element name="event-type" type="rf:string-type" substitutionGroup="rf:typeAbstract"/>
	<xs:element name="event-subtype" type="rf:string-type" substitutionGroup="rf:typeAbstract"/>

	<xs:simpleType name="associated">
		<xs:restriction base="xs:string">
			<xs:enumeration value="include"/>
			<xs:enumeration value="exclude"/>
			<xs:enumeration value="only"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="order-by">
		<xs:simpleContent>
			<xs:extension base="rf:order-by-restriction">
				<xs:attribute name="ascending" type="xs:boolean" default="false"/>
				<xs:attribute name="latitude" type="rf:lat" default="0"/>
				<xs:attribute name="longitude" type="rf:lon" default="0"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>


	<xs:simpleType name="order-by-restriction">
		<xs:restriction base="xs:string">
			<xs:enumeration value="severity"/>
			<xs:enumeration value="updated-time"/>
			<xs:enumeration value="start-time"/>
			<xs:enumeration value="closed-lanes"/>
			<xs:enumeration value="location"/>
			<xs:enumeration value="system"/>
			<xs:enumeration value="event-subtype"/>
			<xs:enumeration value="id"/>
			<xs:enumeration value="distance"/>
			<xs:enumeration value="tmc-order"/>
			<xs:enumeration value="none"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="tmc-road">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="direction" type="xs:string"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<xs:simpleType name="time-dateTime">
		<xs:union memberTypes="xs:date xs:dateTime"/>
	</xs:simpleType>

	<xs:simpleType name="isType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="equal"/>
			<xs:enumeration value="not equal"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="lat">
		<xs:restriction base="xs:decimal">
			<xs:minExclusive value="-90"/>
			<xs:maxExclusive value="90"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="lon">
		<xs:restriction base="xs:decimal">
			<xs:minExclusive value="-180"/>
			<xs:maxExclusive value="180"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="positiveDecimal">
		<xs:restriction base="xs:decimal">
			<xs:minInclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="positiveInteger">
		<xs:restriction base="xs:integer">
			<xs:minInclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="positiveIntegerOrRange">
		<xs:restriction base="xs:string">
			<xs:pattern value="\d+|\d+\-\d+"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="string">
		<xs:restriction base="xs:string">
			<xs:pattern value="[@\-_\+\w\s\(\)/\.:]+"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="byType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="greater"/>
			<xs:enumeration value="less"/>
			<xs:enumeration value="equal"/>
			<xs:enumeration value="not equal"/>
			<xs:enumeration value="between"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="zone-filters">
		<xs:sequence>
			<xs:element ref="rf:zoneAbstract" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="zoneAbstract" abstract="true"/>

	<xs:element name="volume" substitutionGroup="rf:zoneAbstract" type="rf:zoneInfo"/>
	<xs:element name="speed" substitutionGroup="rf:zoneAbstract" type="rf:zoneInfo"/>
	<xs:element name="occupancy" substitutionGroup="rf:zoneAbstract" type="rf:zoneInfo"/>
	<xs:element name="travelTime" substitutionGroup="rf:zoneAbstract" type="rf:zoneInfo"/>
	<xs:element name="status" substitutionGroup="rf:zoneAbstract" type="rf:zoneInfo"/>

	<xs:complexType name="zoneInfo">
		<xs:simpleContent>
			<xs:extension base="rf:positiveInteger">
				<xs:attribute name="by" type="rf:byType" default="equal"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<xs:complexType name="outputParameters">
		<xs:all>
			<xs:element name="format" maxOccurs="1" minOccurs="0" default="atis-tmdd-xml">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="atis-tmdd-xml"/>
						<xs:enumeration value="atis-tmdd-v3-xml"/>
						<xs:enumeration value="rf-schema-xml"/>
						<xs:enumeration value="rf-json"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="order-by" type="rf:order-by" minOccurs="0"/>
			<xs:element minOccurs="0" name="response-limit" type="rf:positiveIntegerOrRange"/>
		</xs:all>
	</xs:complexType>

</xs:schema>
